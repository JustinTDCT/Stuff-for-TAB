#!/bin/bash  
# Set variable defaults
vupw="NOT SET"
tapw="NOT SET"
nasip="NOT SET"
lturl="NOT SET"
devnm="/dev/sdb"
host="NOT SET"
if [ -f /home/tabadmin/script_runs.cfg ]; then
    echo "This script has been run before, importing values used in the past ..."
    read -t5
    vupw=$(sed '1q;d' /home/tabadmin/script_runs.cfg)
    tapw=$(sed '2q;d' /home/tabadmin/script_runs.cfg)
    nasip=$(sed '3q;d' /home/tabadmin/script_runs.cfg)
    lturl=$(sed '4q;d' /home/tabadmin/script_runs.cfg)
    devnm=$(sed '5q;d' /home/tabadmin/script_runs.cfg)
    host=$(sed '6q;d' /home/tabadmin/script_runs.cfg)
    curstate=$(sed '7q;d' /home/tabadmin/script_runs.cfg)
    case $curstate in
        change_nas_ip) change_nas_ip ;;
        do_updates) do_updates ;;
        set_initiator) set_initiator ;;
        edit_scsi_conf) edit_scsi_conf ;;
        set_uuid) set_uuid ;;
        create_veeam_user) create_veeam_user ;;
        *) change_tabadmin_pw ;;
    esac
fi

# Function to actually do install
installfunction () {
  cat<<EOF
  Starting setup using:
  - veeamuser password: $vupw
  - tabadmin password: $tapw
  - NAS IP: $nasip
  - iSCSI device: $devnm
  - LT URL: $lturl
  - HVHOST: $host

EOF
echo $vupw > /home/tabadmin/script_runs.cfg
echo $tapw >> /home/tabadmin/script_runs.cfg
echo $nasip >> /home/tabadmin/script_runs.cfg
echo $lturl >> /home/tabadmin/script_runs.cfg
echo $devnm >> /home/tabadmin/script_runs.cfg
echo $host >> /home/tabadmin/script_runs.cfg
  echo "Take a checkpoint of the VM now so if something goes wrong you can roll back easily, hit any key when ready ..."
  read -s
  echo
  # Change TABADMIN password
  change_tabadmin_pw
}
change_tabadmin_pw () {
  echo "Changing tabadmin password ... this is manual but you wanted to use "$tapw
  sudo passwd -d tabadmin
  sudo passwd tabadmin
  if [ $? != 0 ]; then
    echo "Something happened here, gonna quit.";
    exit
  fi
  echo change_nas_ip >> /home/tabadmin/script_runs.cfg
  change_nas_ip
}
change_nas_ip () {
  # Check the NAS IP is reachable
  echo "Checking the NAS IP ..."
  ping -c 5 $nasip
  if [ $? != 0 ]; then
    echo "NAS doesn't answer pings, gonna quit.";
    exit
  fi
  echo do_updates >> /home/tabadmin/script_runs.cfg
  do_updates
}
do_updates () {
  # Update base OS
  echo "Running updates, hit any key to start ..."
  read -s
  sudo apt update
  sudo apt upgrade -y
  # install apps we want
  sudo apt install -y bmon unzip default-jre
  echo
  echo set_initiator >> /home/tabadmin/script_runs.cfg
set_initiator
}
set_initiator () {
  # give the initiator a unique name so it doesn't smash another connection
  echo "Updating Initiator Name ..."
  sudo cat > /etc/iscsi/initiatorname.iscsi <<EOF
InitiatorName=iqn.2004-10.com.$host:veeamxfs01
EOF
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Rename didn't take, gonna quit.";
    exit
  fi
  echo "Take note of the iSCSI ID below then hit any key to continue ..."
  read -s
  # output the initiator info so you can put it in the NAS
  sudo cat /etc/iscsi/initiatorname.iscsi
  echo 
  echo "Make sure you configure the NAS now for iSCSI and provide that ID then hit any key to continue... "
  read -s
  echo edit_scsi_conf >> /home/tabadmin/script_runs.cfg
  edit_scsi_conf
}
edit_scsi_conf () {
  echo
  echo "Hit any key to open the iSCSI config file. Remove the comment before the automatic start and add one before the manual start..."
  read -s
  # open the iscsid.conf file for editing
  sudo nano /etc/iscsi/iscsid.conf
  echo
  echo "Restarting iSCSI service ..."
  # restart the iscsi services
  sudo systemctl restart iscsid open-iscsi
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Service didn't restart normally, gonna quit.";
    exit
  fi
  echo
  echo "Connecting to iSCSI ..."
  # look for iscsi luns on the NAS IP
  sudo iscsiadm -m discovery -t sendtargets -p $nasip
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Couldn't find any targets, gonna quit.";
    exit
  fi
  echo
  echo "Logging in to iSCSI ..."
  # connect to the LUNs
  sudo iscsiadm -m node --login
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Login failed, gonna quit.";
    exit
  fi
  echo
  echo "Creating volume ..."
  # make your volumes on the LUN
  sudo parted --script $devnm "mklabel gpt"
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Partitioning failed, gonna quit.";
    exit
  fi
  sudo parted --script $devnm "mkpart primary 0% 100%"
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Partitioning failed, gonna quit.";
    exit
  fi
  echo 
  echo "Formatting volume ..."
  # format the LUN
  sudo mkfs.xfs -b size=4096 -m reflink=1,crc=1 $devnm -f -K
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Format failed, gonna quit.";
    exit
  fi
  echo
  # make sure it worked
  echo set_uuid >> /home/tabadmin/script_runs.cfg
  set_uuid
}
set_uuid () {
  sudo blkid $devnm
  echo "Take note of the UUID above then hit any key to conitnue to edit the fstab file ..."
  echo "Add this line /dev/disk/by-uuid/--the_UUID_FROM ABOVE-- /mnt/veeamrepo xfs _netdev 0 0"
  echo "Hit any key to continue ..."
  read -s
  # make the mount point folder
  sudo mkdir /mnt/veeamrepo
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Couldn't make folder, gonna quit.";
    exit
  fi
  # open fstab for editing so you can paste the UUID mount in there
  sudo nano /etc/fstab
  echo
  echo "Attempting to mount volume ..."
  # remount everyhing in fstab
  sudo mount -a
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Mounting failed, gonna quit.";
    exit
  fi
  echo "Listing volumes mapped to " $devnm "..."
  # list volumes so you can check for your veeam repo
  df -H | grep $devnm
  echo
  echo "Does this look right? If so hit any key otherwise CTRL+BREAK now and bail ..."
  read -s
  echo
  echo create_veeam_user >> /home/tabadmin/script_runs.cfg
  create_veeam_user
}
create_veeam_user () {
  echo "Creating veeamuser ..."
  # create the veeam user
  sudo useradd veeamuser --create-home -s /bin/bash
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Adding the user failed, gonna quit.";
    exit
  fi
  echo "Please enter the password for veeamuser - you wanted to use $vupw ..."
  # set a password for the user
  sudo passwd veeamuser
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Setting the password failed, gonna quit.";
    exit
  fi
  # make them a SUDOr
  sudo usermod -a -G sudo veeamuser
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Making the user a SUDO user failed, gonna quit.";
    exit
  fi
  # give them ownership of the mount point
  sudo chown -R veeamuser:veeamuser /mnt/veeamrepo/
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Setting permissions failed, gonna quit.";
    exit
  fi
  # set permissions so only they can get to it
  sudo chmod 700 /mnt/veeamrepo/
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Setting permissions failed, gonna quit.";
    exit
  fi
  echo
  echo "Installing LT agent"
  # download the LT agent
  wget -O agent.zip $lturl
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Getting the LT agent failed, gonna quit.";
    exit
  fi
  # unzip the agent
  unzip agent.zip
  # make sure the command worked and bail if it didn't
  if [ $? != 0 ]; then
    echo "Unzipping the agent failed, gonna quit.";
    exit
  fi
  cd LTechAgent/
  # set the installer script as executable then run it
  chmod +x install.sh
  sudo ./install.sh
  echo "Install done, you can verify in the thick client then press any key to continue ..."
  read -s
  echo "Script is mostly done - configure Veeam now and when done return to this window"
  echo "Hit any key ..."
  read -s
  echo "Removing veeamuser from SUDO group"
  # take the veeam user out of SUDO
  sudo usermod -a -G sudo veeamuser
  # set the login script files so this doesn't run again
  rm /home/tabadmin/stateipset.txt
  echo "VEEAMSET" > /home/tabadmin/stateveeamdone.txt
  rm -f /home/tabadmin/script_runs.cfg
  exit
}

# menu look at the start of the script when you run it
while :
do
    clear
    cat<<EOF
  VM Setup Script v1.0.0
  =============================
  1) veeamuser password: $vupw
  2) tabadmin password: $tapw
  3) NAS IP: $nasip
  4) iSCSI device: $devnm
  5) LT agent URL: $lturl
  6) HV hostanme: $host
  9) Start
  0) Quit 

EOF
    read -n1 -s
    case "$REPLY" in
    "1")  read -p "new veeamuser password : " vupw ;;
    "2")  read -p "new tabadmin password : " tapw ;;
    "3")  read -p "new NAS IP : " nasip ;;
    "4")  read -p "new device id : " devnm ;;
    "5")  read -p "new agent URL : " lturl ;;
    "6")  read -p "hv host name : " host ;;
    "9")  installfunction ;;
    "0")  exit                      ;;
     * )  echo "invalid option"     ;;
    esac
    sleep 1
done
